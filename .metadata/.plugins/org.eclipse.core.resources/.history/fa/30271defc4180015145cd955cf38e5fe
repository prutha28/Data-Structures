package sorting.quick;

public class QuickSort {

	/**
	 * Sorts the array contained within the indices p & r ( both inclusive).
	 * @param data
	 * @param p
	 * @param r
	 */

	// RECURSIVE
	public void QUICKSORT( int data[], int p, int r ){

		System.out.println("\nEntered with indices p = " + p + " and r = " + r);
		// BASE case
		if( p >= r)
			return ;

		// INDUCTIVE
		else{	// p < r
			int partitionIndex = PARTITION( data , p, r) ;			// DECOMPOSE or Splitting of array.
			QUICKSORT(data, p, partitionIndex - 1 ) ;
			QUICKSORT(data, partitionIndex , r ) ;
		}
	}


	private int PARTITION(int[] data, int p, int r) {

		// Lets consider the first element of the array as our pivot.
		int pivot = data[ p ] ;	 

		// counters
		int i = p -1 ;
		int j = r + 1 ;

		// All the elements of data array that are less than/equal to the pivot 
		// are kept to the left & all those that are greater than pivot to the right.

		while( i < j ){

			while( ( i < j) && data[ i ] <= pivot ){
				i++ ;
			}

			while( ( i < j) && data[ j ] > pivot ){
				j-- ;
			}

			// i.e. If any of the above for loops are exited because the second condition fails
			// and first condition still holds.

			// if(( data[ i ] > pivot )||( data[ j ] < pivot ) ) equivalent to the single condition below.
			if( i < j ){
				exchange( data[i] , data[j] ) ;
			}
		}// This loop exits when i crosses j .. so i is the beginning of the new subarray.

		return i ;
	}

	private void exchange( Integer x, Integer y) {
		Integer temp = x ;
		x = y ;
		y = temp ;
	}
}
