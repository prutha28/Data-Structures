package score.card.game;

/**
 * @author prutha!
 *
 *	This will consist of an underlying array of GameEntries of some fixed size.
 *	that we shall call capacity.
 */

public class ScoreCard {

	public static final int CAPACITY = 10 ;

	// Actual number of entries. ( <= CAPACITY)
	private int numEntries ;
	// This array is stored in an ordered manner from largest to lowest.
	private GameEntry[] board ;	

	public ScoreCard(){
		board = new GameEntry[ CAPACITY ] ;
		numEntries = 0 ;
	}


	public void addEntry( GameEntry entry){

		// Insert only in these 2 conditions.
		if( numEntries < board.length || entry.getScore() > board[numEntries - 1].getScore())
		{
			int j = numEntries - 1 ;	// index of the last element.
			while( j > 0 && board[j].getScore() < entry.getScore())
			{
				j-- ;
			}
			// Point of insertion is j +1
			
			// shift all elements beyond j+1
			int k = numEntries - 1 ; // last index
			while( k > (j + 1)){
				board[ k ] = board[ k - 1 ] ;
			}

			board[ j + 1 ] = entry ;
		}
	}

	public GameEntry removeEntry( int index ){
		GameEntry entry = board[ index ] ;

		return entry ;
	}

	public void display(){
		for (int i = 0; i < board.length; i++) {
			System.out.println(board[ i ]);
			System.out.println();
		}
	}
}
