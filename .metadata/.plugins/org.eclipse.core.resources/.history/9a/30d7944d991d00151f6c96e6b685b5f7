package circular.linked.lists;

import circular.linked.lists.CircularLinkedList.Node;

public class CircularLinkedList implements ICircularLinkedList {

	class Node{
		private int data ;
		private Node next ;

		public Node(){
			this.data  = -1;
			this.next = null ;
		}

		public Node( int data ){
			this.data  = data ;
			this.next = null ;
		}
	}


	Node entry ;

	//	Empty Linked list.
	public CircularLinkedList(){
		this.entry = null ;
	}

	/**
	 * Adding a node to the end of the list.
	 * @param entry
	 */
	public Node addNode( Node entry, int element ) 
	{	
		// Corner Cases.
		// Empty List.
		if( entry == null ){
			entry = new Node(element) ;
			entry.next = entry ;
			return entry ;
		}

		// We only have the head node with us.
		// 1. Copy the data of the head node into the new node.
		Node newNode = new Node() ;
		newNode.data = entry.data ;
		newNode.next = entry.next ;

		// 2. Make the head.next point to the new Node. 
		entry.next = newNode ;

		// 3. Copy new data into head node.
		entry.data = element ;

		// 4. Finally we move the head to the next node,
		// which makes it as if we added the new element before the head.
		entry = entry.next ;
		return entry ;
	}

	/**
	 * Removing node from the start of the list.
	 * @param entry
	 */
	public void removeNode( Node entry) 
	{
		// Corner Cases.
		// Empty List.
		if( entry == null ){
			return ;
		}
		// 1 element only. remove it.
		else if( entry.next == null ){
			entry.next = null ;
		}
		// We only have a pointer to the node that follows the head node.
		// 1. Copy the data from the head.next node into head node.
		entry.data = entry.next.data ;
		// 2. Make the head node point to what the next node was pointing to.
		entry.next = entry.next.next ;
	}


	public int size( Node entry )
	{
		int count = 1 ;
		Node current = entry.next ;

		while( current != null && current != entry){
			count++ ;
		}

		return count ;

	}

	public void display(Node entry) {

		System.out.printf("%4d", entry.data ); // For the first element.
		Node current = entry.next ;
		while( current!= null && current != entry ){
			System.out.printf("%4d", current.data );
			current = current.next ;
		}
	}
}

