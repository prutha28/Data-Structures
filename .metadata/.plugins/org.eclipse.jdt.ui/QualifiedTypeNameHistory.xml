<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<qualifiedTypeNameHistroy>
<fullyQualifiedTypeName name="implementing.dequeues.using.linked.lists.IDequeue"/>
<fullyQualifiedTypeName name="implementing.dequeues.using.linked.lists.Node"/>
<fullyQualifiedTypeName name="implementing.stack.using.dequeue.IQueue"/>
<fullyQualifiedTypeName name="implementing.stack.using.dequeue.Queue"/>
<fullyQualifiedTypeName name="implementing.queue.using.dequeue.IStack"/>
<fullyQualifiedTypeName name="implementing.queue.using.dequeue.Stack"/>
<fullyQualifiedTypeName name="implementing.dequeues.using.linked.lists.Dequeue"/>
<fullyQualifiedTypeName name="hashing.basics.IHash"/>
<fullyQualifiedTypeName name="hashing.basics.Hash"/>
<fullyQualifiedTypeName name="hashing.basics.Item"/>
<fullyQualifiedTypeName name="unordered.linked.lists.Node"/>
<fullyQualifiedTypeName name="unordered.linked.lists.LinkedList"/>
<fullyQualifiedTypeName name="binary.trees.ITree"/>
<fullyQualifiedTypeName name="binary.trees.TreeNode"/>
<fullyQualifiedTypeName name="binary.search.trees.BSTNode"/>
<fullyQualifiedTypeName name="sorting.MergeSort"/>
<fullyQualifiedTypeName name="sorting.merge.MergeSort"/>
<fullyQualifiedTypeName name="java.util.ArrayList"/>
<fullyQualifiedTypeName name="java.util.Arrays"/>
<fullyQualifiedTypeName name="factorial.Factorial"/>
<fullyQualifiedTypeName name="fibonacci.FibonacciTest"/>
<fullyQualifiedTypeName name="java.lang.IllegalArgumentException"/>
<fullyQualifiedTypeName name="fibonacci.Fibonacci"/>
<fullyQualifiedTypeName name="towers.of.hanoi.TowerOfHanoi"/>
<fullyQualifiedTypeName name="java.lang.Object"/>
<fullyQualifiedTypeName name="javax.print.attribute.standard.Finishings"/>
<fullyQualifiedTypeName name="java.lang.System"/>
<fullyQualifiedTypeName name="java.util.Scanner"/>
<fullyQualifiedTypeName name="sorting.merge.MergeSort_Cormen_Fashion_Test"/>
<fullyQualifiedTypeName name="sorting.merge.MergeSort_Cormen_Fashion"/>
<fullyQualifiedTypeName name="sorting.quick.QuickSort"/>
<fullyQualifiedTypeName name="java.lang.Integer"/>
<fullyQualifiedTypeName name="applications.of.stack.Span"/>
<fullyQualifiedTypeName name="java.util.Random"/>
<fullyQualifiedTypeName name="list.implementation.of.stacks.Stack"/>
<fullyQualifiedTypeName name="applications.of.stack.SpanUsingStack"/>
<fullyQualifiedTypeName name="java.util.List"/>
<fullyQualifiedTypeName name="representation.of.graphs.using.adjacency.list.AdjacencyList"/>
<fullyQualifiedTypeName name="representation.of.graphs.using.adjacency.list.Node"/>
<fullyQualifiedTypeName name="representation.of.graphs.Node"/>
<fullyQualifiedTypeName name="representation.of.graphs.LinkageNode"/>
<fullyQualifiedTypeName name="java.util.HashSet"/>
<fullyQualifiedTypeName name="java.util.Set"/>
<fullyQualifiedTypeName name="heap.data.structure.IHeap"/>
<fullyQualifiedTypeName name="heap.data.structure.Heap"/>
<fullyQualifiedTypeName name="geek.linked.lists.MiddleOfLL"/>
<fullyQualifiedTypeName name="geek.linked.lists.DeletingNodeWithoutHead"/>
<fullyQualifiedTypeName name="java.util.HashMap"/>
<fullyQualifiedTypeName name="java.util.Map"/>
<fullyQualifiedTypeName name="geek.linked.lists.LinkedListUtils"/>
<fullyQualifiedTypeName name="geek.linked.lists.LinkedListUtilsTest"/>
<fullyQualifiedTypeName name="geek.linked.lists.LinkedList"/>
<fullyQualifiedTypeName name="geek.linked.lists.Node"/>
<fullyQualifiedTypeName name="score.card.game.ScoreCard"/>
<fullyQualifiedTypeName name="score.card.game.GameEntry"/>
<fullyQualifiedTypeName name="java.lang.IndexOutOfBoundsException"/>
<fullyQualifiedTypeName name="sorted.arrays.GameEntry"/>
<fullyQualifiedTypeName name="java.lang.Enum"/>
<fullyQualifiedTypeName name="circular.linked.lists.CircularLinkedList"/>
<fullyQualifiedTypeName name="circular.linked.lists.CircularLinkedList.Node"/>
</qualifiedTypeNameHistroy>
